@page



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Events - Vista</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/sidebar.css">
    <style>
        /* Main Layout */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f5f7;
        }

        .dashboard-wrapper {
            display: flex;
            min-height: 100vh;
        }

        .main-content {
            flex-grow: 1;
            padding: 0;
            display: flex;
            flex-direction: column;
        }

        /* Top Header */
        .top-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 2rem;
        }

        .calendar-title h2 {
            font-size: 1.5rem;
            color: #333;
            font-weight: 600;
        }

        .user-actions {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .notification-btn, .settings-btn {
            background: none;
            border: none;
            font-size: 1.2rem;
            color: #666;
            cursor: pointer;
        }

        .user-profile-mini {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.9rem;
            color: #333;
        }

            .user-profile-mini .role {
                font-size: 0.75rem;
                color: #777;
                display: block;
            }

        .profile-pic {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

        /* Content Container */
        .content-container {
            display: flex;
            flex-grow: 1;
            padding: 1.5rem;
            gap: 1.5rem;
        }

        /* Calendar Section */
        .calendar-section {
            flex-grow: 1;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .month-navigation {
            display: flex;
            align-items: flex-start;
        }

        .month-nav-btn {
            background: none;
            border: none;
            font-size: 1rem;
            color: #666;
            cursor: pointer;
            padding: 0.5rem;
        }

        #current-month {
            font-size: 1.2rem;
            font-weight: 500;
            color: #333;
        }

        /* Calendar Table */
        .calendar-grid-container {
            width: 100%;
        }

        .calendar-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0.5rem;
        }

            .calendar-table th {
                padding: 0.5rem;
                text-align: center;
                font-weight: 500;
                color: #666;
                font-size: 0.9rem;
            }

            .calendar-table td {
                position: relative;
                width: 14.28%;
                height: 100px;
                background-color: #f9f9f9;
                border-radius: 5px;
                vertical-align: top;
                text-align: center;
                padding: 0.5rem;
                cursor: pointer;
                transition: background-color 0.2s;
            }

                .calendar-table td:hover {
                    background-color: #f0f0f0;
                }

                .calendar-table td.other-month {
                    background-color: #f2f2f2;
                    color: #aaa;
                }

                .calendar-table td.today {
                    background-color: rgba(66, 133, 244, 0.1);
                    border: 1px solid rgba(66, 133, 244, 0.5);
                }

        .calendar-day {
            display: inline-block;
            width: 25px;
            height: 25px;
            line-height: 25px;
            text-align: center;
            border-radius: 50%;
            margin-bottom: 0.5rem;
        }

        .today .calendar-day {
            background-color: #4285f4;
            color: white;
        }

        /* Event Indicators */
        .event-indicator {
            display: block;
            font-size: 0.7rem;
            padding: 2px 4px;
            border-radius: 3px;
            margin-top: 2px;
            text-align: center;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            color: white;
        }

        .event-board {
            background-color: #f44336;
        }

        .event-pool {
            background-color: #4285f4;
        }

        .event-maintenance {
            background-color: #e09c0f;
        }

        .event-yard {
            background-color: #4caf50;
        }

        .event-community {
            background-color: #4caf50;
        }

        .event-participate {
            background-color: #e09c0f;
        }

        .event-general {
            background-color: #4285f4;
        }

        .event-meeting {
            background-color: #f44336;
        }

        /* Upcoming Events */
        .upcoming-events-section {
            margin-top: 1rem;
        }

        .upcoming-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }

            .upcoming-header h3 {
                font-size: 1.1rem;
                font-weight: 500;
                color: #333;
            }

        .event-filter select {
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            color: #555;
            background-color: #fff;
        }

        .upcoming-events-list {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            max-height: 300px;
            overflow-y: auto;
        }

        .event-item {
            display: flex;
            align-items: flex-start;
            background-color: #f9f9f9;
            border-radius: 5px;
            padding: 1rem;
            gap: 1rem;
        }

        .event-date {
            background-color: #4285f4;
            color: white;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            font-weight: bold;
            font-size: 1.1rem;
        }

        .event-details {
            flex-grow: 1;
        }

            .event-details h4 {
                margin-bottom: 0.3rem;
                color: #333;
            }

        .event-time, .event-location {
            font-size: 0.85rem;
            color: #666;
            margin-bottom: 0.2rem;
        }

        .event-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .btn {
            padding: 0.3rem 0.8rem;
            border: none;
            border-radius: 4px;
            font-size: 0.8rem;
            cursor: pointer;
            font-weight: 500;
            color: white;
        }

            .btn.meeting {
                background-color: #f44336;
            }

            .btn.community {
                background-color: #4caf50;
            }

            .btn.general {
                background-color: #4285f4;
            }

            .btn.participate {
                background-color: #e09c0f;
            }

            .btn.details {
                background-color: #9e9e9e;
            }

        /* Right Sidebar */
        .right-sidebar {
            width: 280px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            padding: 24px;
        }

        .user-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 36px;
        }

        .notification-settings {
            display: flex;
            gap: 10px;
        }

        .icon-btn {
            background: none;
            border: none;
            color: #d4b675;
            cursor: pointer;
            font-size: 18px;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .user-text {
            display: flex;
            flex-direction: column;
        }

        .user-name {
            font-weight: 600;
            color: #333;
            font-size: 16px;
        }

        .user-role {
            color: #888;
            font-size: 14px;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

        .section-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin-bottom: 16px;
        }

        .activity-list {
            display: flex;
            flex-direction: column;
            gap: 16px;
            margin-bottom: 32px;
        }

        .activity-item {
            display: flex;
            gap: 12px;
        }

        .activity-avatar {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            object-fit: cover;
        }

        .activity-content {
            flex: 1;
        }

        .activity-text {
            font-size: 14px;
            color: #333;
            margin-bottom: 4px;
            line-height: 1.4;
        }

            .activity-text strong {
                font-weight: 600;
            }

        .activity-time {
            font-size: 12px;
            color: #888;
        }

        .history-list {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .history-item {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .history-icon {
            width: 36px;
            height: 36px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .purple-gradient {
            background: linear-gradient(135deg, #7367f0, #ce9ffc);
        }

        .green-gradient {
            background: linear-gradient(135deg, #00b09b, #96c93d);
        }

        .blue-gradient {
            background: linear-gradient(135deg, #0072ff, #00c6ff);
        }

        .orange-gradient {
            background: linear-gradient(135deg, #f12711, #f5af19);
        }

        .history-content {
            flex: 1;
        }

        .history-title {
            font-size: 14px;
            font-weight: 600;
            color: #333;
            margin-bottom: 2px;
        }

        .history-user {
            font-size: 12px;
            color: #888;
        }

        .history-time {
            font-size: 12px;
            color: #888;
            white-space: nowrap;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

            .modal.show {
                display: flex;
            }

        .modal-content {
            background-color: #fff;
            padding: 2rem;
            border-radius: 10px;
            width: 500px;
            max-width: 90%;
            position: relative;
        }

        .close-modal {
            position: absolute;
            top: 1rem;
            right: 1rem;
            font-size: 1.5rem;
            cursor: pointer;
            color: #666;
        }

        #modal-title {
            margin-bottom: 1.5rem;
            color: #333;
        }

        .modal-event {
            background-color: #f9f9f9;
            padding: 1rem;
            border-radius: 5px;
            margin-bottom: 1rem;
        }

            .modal-event:last-child {
                margin-bottom: 0;
            }

        .modal-event-title {
            font-size: 1.1rem;
            font-weight: 500;
            color: #333;
            margin-bottom: 0.5rem;
        }

        .modal-event-time,
        .modal-event-location,
        .modal-event-description {
            font-size: 0.9rem;
            color: #555;
            margin-bottom: 0.3rem;
        }

        .modal-event-badge {
            display: inline-block;
            padding: 0.2rem 0.6rem;
            border-radius: 3px;
            font-size: 0.75rem;
            color: white;
            margin-top: 0.5rem;
        }

        .badge-board {
            background-color: #f44336;
        }

        .badge-pool {
            background-color: #4285f4;
        }

        .badge-maintenance {
            background-color: #e09c0f;
        }

        .badge-yard {
            background-color: #4caf50;
        }
        /* Event Creation Form Styles */
        .form-group {
            margin-bottom: 1rem;
        }

            .form-group label {
                display: block;
                margin-bottom: 0.5rem;
                font-weight: 500;
                color: #333;
            }

            .form-group input,
            .form-group select,
            .form-group textarea {
                width: 100%;
                padding: 0.75rem;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 0.9rem;
                color: #333;
            }

            .form-group textarea {
                resize: vertical;
            }

        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            margin-top: 1.5rem;
        }

            .form-actions button {
                padding: 0.75rem 1.5rem;
                border-radius: 4px;
                font-weight: 500;
                cursor: pointer;
                transition: background-color 0.2s;
            }

        #cancel-event {
            background-color: #f1f1f1;
            border: 1px solid #ddd;
            color: #555;
        }

            #cancel-event:hover {
                background-color: #e5e5e5;
            }

        #save-event {
            background-color: #4285f4;
            border: none;
            color: white;
        }

            #save-event:hover {
                background-color: #3367d6;
            }

        /* Event listing in modal */
        #existing-events {
            border-top: 1px solid #eee;
            padding-top: 1.5rem;
        }

        .event-list-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem;
            background-color: #f9f9f9;
            border-radius: 4px;
            margin-bottom: 0.75rem;
        }

            .event-list-item:last-child {
                margin-bottom: 0;
            }

        .event-list-details {
            flex-grow: 1;
        }

        .event-list-title {
            font-weight: 500;
            margin-bottom: 0.25rem;
        }

        .event-list-time {
            color: #666;
            font-size: 0.85rem;
        }

        .event-list-actions {
            display: flex;
            gap: 0.5rem;
        }

            .event-list-actions button {
                background: none;
                border: none;
                cursor: pointer;
                color: #666;
                font-size: 0.9rem;
                padding: 0.25rem 0.5rem;
            }

                .event-list-actions button:hover {
                    color: #333;
                }

            .event-list-actions .edit-btn:hover {
                color: #4285f4;
            }

            .event-list-actions .delete-btn:hover {
                color: #f44336;
            }

    </style>
</head>
<body>
    <div class="dashboard-wrapper">
        <!-- Sidebar - Existing sidebar component -->
        <aside class="sidebar">
            <div class="logo">
                <img src="~/Images/logo 1.png" alt="Vista Logo">
                <span>vista.</span>
            </div>

            <nav class="nav-menu">
                <ul>
                    <li>
                        <a href="/homeOwner/dashboard">
                            <i class="fas fa-th-large"></i>
                            <span>Dashboard</span>
                        </a>
                    </li>
                    <li>
                        <a href="/homeOwner/Announcements">
                            <i class="fas fa-bullhorn"></i>
                            <span>Announcements</span>
                        </a>
                    </li>
                    <li>
                        <a href="/homeOwner/BillingPayments">
                            <i class="fas fa-file-invoice-dollar"></i>
                            <span>Billing & Payments</span>
                        </a>
                    </li>
                    <li>
                        <a href="/homeOwner/FacilityReservation">
                            <i class="fas fa-calendar-check"></i>
                            <span>Facility Reservation</span>
                        </a>
                    </li>
                    <li>
                        <a href="/homeOwner/ServiceRequest">
                            <i class="fas fa-hands-helping"></i>
                            <span>Service Request</span>
                        </a>
                    </li>
                    <li>
                        <a href="/homeOwner/Documents">
                            <i class="fas fa-file-alt"></i>
                            <span>Documents</span>
                        </a>
                    </li>
                    <li class="active">
                        <a href="/homeOwner/EventsCalendar">
                            <i class="fas fa-calendar-alt"></i>
                            <span>Events Calendar</span>
                        </a>
                    </li>
                    <li>
                        <a href="/homeOwner/EditProfile">
                            <i class="fas fa-user-circle"></i>
                            <span>Edit Profile</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <!-- Top Header -->
            <div class="top-header">
                <div class="calendar-title">
                    <h2>Event Calendar</h2>
                </div>
                <div class="user-header">
                    <div class="notification-settings">
                        <button class="icon-btn"><i class="fas fa-bell"></i></button>
                        <button class="icon-btn"><i class="fas fa-cog"></i></button>
                    </div>
                    <div class="user-info">
                        <div class="user-text">
                            <span class="user-name">Du Bois H.</span>
                            <span class="user-role">Homeowner</span>
                        </div>
                        <img src="/api/placeholder/40/40" alt="User Avatar" class="user-avatar">
                    </div>
                </div>
            </div>
            <div class="month-navigation">
                <button id="prev-month" class="month-nav-btn"><i class="fas fa-chevron-left"></i></button>
                <h3 id="current-month">Current Month</h3>
                <button id="next-month" class="month-nav-btn"><i class="fas fa-chevron-right"></i></button>
            </div>
            <!-- Calendar Container -->
            <div class="content-container">

                <!-- Main Calendar Section -->
                <div class="calendar-section">

                    <div class="calendar-grid-container">
                        <table class="calendar-table">
                            <thead>
                                <tr>
                                    <th>Sun</th>
                                    <th>Mon</th>
                                    <th>Tue</th>
                                    <th>Wed</th>
                                    <th>Thu</th>
                                    <th>Fri</th>
                                    <th>Sat</th>
                                </tr>
                            </thead>
                            <tbody id="calendar-body">
                            </tbody>
                        </table>
                    </div>

                    <div class="upcoming-events-section">
                        <div class="upcoming-header">
                            <h3>Upcoming Events</h3>
                            <div class="event-filter">
                                <select id="event-filter">
                                    <option value="all-events">All events</option>
                                    <option value="community">Community</option>
                                    <option value="meetings">Meetings</option>
                                    <option value="maintenance">Maintenance</option>
                                </select>
                            </div>
                        </div>

                        <div id="upcoming-events-list" class="upcoming-events-list">
                        </div>
                    </div>
                </div>
        </main>
    </div>
    <!-- Event Modal -->
    <div id="event-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h2 id="modal-title">Create Event</h2>

            <!-- Event Creation Form -->
            <form id="new-event-form">
                <div class="form-group">
                    <label for="event-title">Event Title*</label>
                    <input type="text" id="event-title" name="event-title" required>
                </div>

                <div class="form-group">
                    <label for="event-date">Date*</label>
                    <input type="date" id="event-date" name="event-date" required>
                </div>

                <div class="form-group">
                    <label for="event-time">Time*</label>
                    <input type="text" id="event-time" name="event-time" placeholder="e.g. 2:00 - 4:00 PM" required>
                </div>

                <div class="form-group">
                    <label for="event-location">Location*</label>
                    <input type="text" id="event-location" name="event-location" required>
                </div>

                <div class="form-group">
                    <label for="event-type">Event Type*</label>
                    <select id="event-type" name="event-type" required>
                        <option value="">Select type</option>
                        <option value="meeting">Board Meeting</option>
                        <option value="pool">Pool</option>
                        <option value="maintenance">Maintenance</option>
                        <option value="yard">Yard Sale</option>
                        <option value="community">Community</option>
                        <option value="general">General</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="event-description">Description</label>
                    <textarea id="event-description" name="event-description" rows="4"></textarea>
                </div>

                <div class="form-actions">
                    <button type="button" id="cancel-event">Cancel</button>
                    <button type="submit" id="save-event">Save Event</button>
                </div>
            </form>

            <!-- This section will show existing events for the day -->
            <div id="existing-events" style="margin-top: 2rem; display: none;">
                <h3>Existing Events on This Date</h3>
                <div id="events-list"></div>
            </div>
        </div>
    </div>
    <script>
                     document.addEventListener('DOMContentLoaded', function() {
            // Calendar data (existing events)
            const events = [
                { id: 1, date: '2025-03-03', title: 'Board Meeting', time: '2:00 - 4:00 PM', location: 'Community Function Hall', type: 'meeting', description: 'Monthly board meeting to discuss community issues and plans.' },
                { id: 2, date: '2025-03-12', title: 'Pool Inspection', time: '9:00 AM', location: 'Community Pool', type: 'pool', description: 'Regular inspection of the community pool facilities.' },
                { id: 3, date: '2025-03-14', title: 'Maintenance', time: '7:00 - 11:00 AM', location: 'Common Areas', type: 'maintenance', description: 'Scheduled maintenance of common areas.' },
                { id: 4, date: '2025-03-21', title: 'Yard Sale', time: '8:00 AM', location: 'Throughout neighborhood', type: 'yard', description: 'Community yard sale. Sign up to participate.' },
                { id: 5, date: '2025-03-09', title: 'Landscape Maintenance', time: '7:00 - 11:00 AM', location: 'Common Areas', type: 'maintenance', description: 'Scheduled landscape maintenance.' },
                { id: 6, date: '2025-03-09', title: 'Community Yard Sale', time: '8:00 AM', location: 'Throughout neighborhood', type: 'yard', description: 'Community yard sale. Sign up to participate.' }
            ];

            // Initialize calendar
            const today = new Date();
            let currentMonth = today.getMonth(); // Get current month (0-indexed)
            let currentYear = today.getFullYear(); // Get current year

            // DOM Elements
            const prevMonthBtn = document.getElementById('prev-month');
            const nextMonthBtn = document.getElementById('next-month');
            const currentMonthEl = document.getElementById('current-month');
            const calendarBody = document.getElementById('calendar-body');
            const upcomingEventsList = document.getElementById('upcoming-events-list');
            const eventModal = document.getElementById('event-modal');
            const modalTitle = document.getElementById('modal-title');
            const newEventForm = document.getElementById('new-event-form');
            const closeModal = document.querySelector('.close-modal');
            const cancelEventBtn = document.getElementById('cancel-event');
            const eventDateInput = document.getElementById('event-date');
            const existingEvents = document.getElementById('existing-events');
            const eventsList = document.getElementById('events-list');

            // Event listeners
            prevMonthBtn.addEventListener('click', showPreviousMonth);
            nextMonthBtn.addEventListener('click', showNextMonth);
            closeModal.addEventListener('click', closeEventModal);
            cancelEventBtn.addEventListener('click', closeEventModal);
            newEventForm.addEventListener('submit', saveNewEvent);

            // Initial render
            renderCalendar();
            renderUpcomingEvents();

            // Calendar functions
            function renderCalendar() {
                calendarBody.innerHTML = '';

                // Update month display
                const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                currentMonthEl.textContent = `${months[currentMonth]} ${currentYear}`;

                // Get first day of the month
                const firstDay = new Date(currentYear, currentMonth, 1);
                const startingDay = firstDay.getDay(); // 0 = Sunday

                // Get number of days in month
                const lastDay = new Date(currentYear, currentMonth + 1, 0);
                const daysInMonth = lastDay.getDate();

                // Get last day of previous month
                const prevMonthLastDay = new Date(currentYear, currentMonth, 0).getDate();

                // Build calendar
                let date = 1;
                let nextMonthDate = 1;

                // Create rows
                for (let i = 0; i < 6; i++) {
                    // Break if we've gone beyond the days in the month
                    if (date > daysInMonth) break;

                    const row = document.createElement('tr');

                    // Create cells
                    for (let j = 0; j < 7; j++) {
                        const cell = document.createElement('td');
                        const cellDay = document.createElement('span');
                        cellDay.className = 'calendar-day';

                        // Previous month days
                        if (i === 0 && j < startingDay) {
                            const prevMonthDay = prevMonthLastDay - (startingDay - j - 1);
                            cellDay.textContent = prevMonthDay;
                            cell.className = 'other-month';
                            cell.dataset.date = `${currentYear}-${String(currentMonth).padStart(2, '0')}-${String(prevMonthDay).padStart(2, '0')}`;
                        }
                        // Current month days
                        else if (date <= daysInMonth) {
                            cellDay.textContent = date;
                            cell.dataset.date = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(date).padStart(2, '0')}`;

                            // Check if it's today
                            if (date === today.getDate() && currentMonth === today.getMonth() && currentYear === today.getFullYear()) {
                                cell.className = 'today';
                            }

                            // Add events for this date
                            const dateEvents = events.filter(event => {
                                const eventDate = new Date(event.date);
                                return eventDate.getDate() === date &&
                                       eventDate.getMonth() === currentMonth &&
                                       eventDate.getFullYear() === currentYear;
                            });

                            dateEvents.forEach(event => {
                                const eventIndicator = document.createElement('span');
                                eventIndicator.className = `event-indicator event-${event.type}`;
                                eventIndicator.textContent = event.title;
                                eventIndicator.dataset.eventId = event.id;
                                cell.appendChild(eventIndicator);
                            });

                            date++;
                        }
                        // Next month days
                        else {
                            cellDay.textContent = nextMonthDate;
                            cell.className = 'other-month';
                            cell.dataset.date = `${currentYear}-${String(currentMonth + 2).padStart(2, '0')}-${String(nextMonthDate).padStart(2, '0')}`;
                            nextMonthDate++;
                        }

                        cell.appendChild(cellDay);
                        cell.addEventListener('click', () => showEventCreationForm(cell.dataset.date));
                        row.appendChild(cell);
                    }

                    calendarBody.appendChild(row);
                }
            }

            function showEventCreationForm(dateString) {
                const selectedDate = new Date(dateString);
                // Format date for display
                const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
                const formattedDate = selectedDate.toLocaleDateString('en-US', options);

                // Set modal title
                modalTitle.textContent = `Create Event for ${formattedDate}`;

                // Reset the form
                newEventForm.reset();
                newEventForm.removeAttribute('data-event-id');
                document.getElementById('save-event').textContent = 'Save Event';

                // Set the date in the form
                eventDateInput.value = formatDateForInput(selectedDate);

                // Check if there are existing events for this date
                const dateEvents = events.filter(event => {
                    const eventDate = new Date(event.date);
                    return eventDate.getDate() === selectedDate.getDate() &&
                           eventDate.getMonth() === selectedDate.getMonth() &&
                           eventDate.getFullYear() === selectedDate.getFullYear();
                });

                // Show or hide existing events section
                if (dateEvents.length > 0) {
                    existingEvents.style.display = 'block';
                    eventsList.innerHTML = '';

                    dateEvents.forEach(event => {
                        const eventItem = document.createElement('div');
                        eventItem.className = 'event-list-item';
                        eventItem.innerHTML = `
                            <div class="event-list-details">
                                <div class="event-list-title">${event.title}</div>
                                <div class="event-list-time">${event.time} | ${event.location}</div>
                            </div>
                            <div class="event-list-actions">
                                <button class="edit-btn" data-event-id="${event.id}"><i class="fas fa-edit"></i></button>
                                <button class="delete-btn" data-event-id="${event.id}"><i class="fas fa-trash"></i></button>
                            </div>
                        `;

                        // Add event listeners for edit and delete buttons
                        const editBtn = eventItem.querySelector('.edit-btn');
                        const deleteBtn = eventItem.querySelector('.delete-btn');

                        editBtn.addEventListener('click', function(e) {
                            e.stopPropagation();
                            editEvent(event.id);
                        });

                        deleteBtn.addEventListener('click', function(e) {
                            e.stopPropagation();
                            deleteEvent(event.id);
                        });

                        eventsList.appendChild(eventItem);
                    });
                } else {
                    existingEvents.style.display = 'none';
                }

                // Show modal
                eventModal.classList.add('show');
            }

            function saveNewEvent(e) {
                e.preventDefault();

                const eventId = newEventForm.dataset.eventId;
                const title = document.getElementById('event-title').value;
                const date = document.getElementById('event-date').value;
                const time = document.getElementById('event-time').value;
                const location = document.getElementById('event-location').value;
                const type = document.getElementById('event-type').value;
                const description = document.getElementById('event-description').value;

                if (eventId) {
                    // Update existing event
                    const eventIndex = events.findIndex(e => e.id === parseInt(eventId));
                    if (eventIndex !== -1) {
                        events[eventIndex] = {
                            id: parseInt(eventId),
                            date: date,
                            title: title,
                            time: time,
                            location: location,
                            type: type,
                            description: description
                        };

                        alert('Event updated successfully!');
                    }
                } else {
                    // Create new event
                    const newId = events.length > 0 ? Math.max(...events.map(e => e.id)) + 1 : 1;

                    // Create new event object
                    const newEvent = {
                        id: newId,
                        date: date,
                        title: title,
                        time: time,
                        location: location,
                        type: type,
                        description: description
                    };

                    // Add to events array
                    events.push(newEvent);

                    alert('Event created successfully!');
                }

                // Re-render calendar and events list
                renderCalendar();
                renderUpcomingEvents();

                // Close modal
                closeEventModal();
            }

            function editEvent(eventId) {
                const event = events.find(e => e.id === parseInt(eventId));
                if (!event) return;

                // Set modal title
                modalTitle.textContent = 'Edit Event';

                // Fill the form with event data
                document.getElementById('event-title').value = event.title;
                document.getElementById('event-date').value = formatDateForInput(new Date(event.date));
                document.getElementById('event-time').value = event.time;
                document.getElementById('event-location').value = event.location;
                document.getElementById('event-type').value = event.type;
                document.getElementById('event-description').value = event.description;

                // Store the event ID for updating
                newEventForm.dataset.eventId = event.id;

                // Change save button text
                document.getElementById('save-event').textContent = 'Update Event';
            }

            function deleteEvent(eventId) {
                if (confirm('Are you sure you want to delete this event?')) {
                    // Find index of event
                    const eventIndex = events.findIndex(e => e.id === parseInt(eventId));

                    if (eventIndex !== -1) {
                        // Remove from array
                        events.splice(eventIndex, 1);

                        // Re-render calendar and events list
                        renderCalendar();
                        renderUpcomingEvents();

                        // Re-display the modal with updated event list
                        showEventCreationForm(document.getElementById('event-date').value);

                        alert('Event deleted successfully!');
                    }
                }
            }

            function renderUpcomingEvents() {
                upcomingEventsList.innerHTML = '';

                // Filter events by date (upcoming)
                const upcomingEvents = events.filter(event => {
                    const eventDate = new Date(event.date);
                    return eventDate >= today;
                }).sort((a, b) => new Date(a.date) - new Date(b.date));

                // Limit to 5 events
                const limitedEvents = upcomingEvents.slice(0, 5);

                // Display events
                if (limitedEvents.length === 0) {
                    const noEvents = document.createElement('p');
                    noEvents.textContent = 'No upcoming events.';
                    upcomingEventsList.appendChild(noEvents);
                    return;
                }

                limitedEvents.forEach(event => {
                    const eventDate = new Date(event.date);
                    const day = eventDate.getDate();

                    const eventItem = document.createElement('div');
                    eventItem.className = 'event-item';
                    eventItem.innerHTML = `
                        <div class="event-date">${day}</div>
                        <div class="event-details">
                            <h4>${event.title}</h4>
                            <p class="event-time">${event.time}</p>
                            <p class="event-location">${event.location}</p>
                            <div class="event-actions">
                                <button class="btn ${event.type}">${capitalizeFirstLetter(event.type)}</button>
                                <button class="btn details" data-event-id="${event.id}">Details</button>
                            </div>
                        </div>
                    `;

                    // Add event listener to details button
                    eventItem.querySelector('.btn.details').addEventListener('click', () => {
                        const eventDate = new Date(event.date);
                        showEventCreationForm(formatDateForInput(eventDate));
                    });

                    upcomingEventsList.appendChild(eventItem);
                });
            }

            function showPreviousMonth() {
                currentMonth--;
                if (currentMonth < 0) {
                    currentMonth = 11;
                    currentYear--;
                }
                renderCalendar();
            }

            function showNextMonth() {
                currentMonth++;
                if (currentMonth > 11) {
                    currentMonth = 0;
                    currentYear++;
                }
                renderCalendar();
            }

            function closeEventModal() {
                eventModal.classList.remove('show');
            }

            // Helper function to format date for input field
            function formatDateForInput(date) {
                const d = new Date(date);
                const year = d.getFullYear();
                const month = String(d.getMonth() + 1).padStart(2, '0');
                const day = String(d.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }

            // Helper function
            function capitalizeFirstLetter(string) {
                return string.charAt(0).toUpperCase() + string.slice(1);
            }

            // Close modal when clicking outside
            window.addEventListener('click', (event) => {
                if (event.target === eventModal) {
                    closeEventModal();
                }
            });

            // Handle escape key press
            document.addEventListener('keydown', (event) => {
                if (event.key === 'Escape' && eventModal.classList.contains('show')) {
                    closeEventModal();
                }
            });
        });
    </script>
</body>
</html>