@page
@model Vista_Subdivision.Pages.Officer.EventCalendarModel
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Events - Vista</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/sidebar.css">
    <link rel="stylesheet" href="~/css/OfficerEventCalendar.css">
    <link href="~/css/sweetalert2.css" rel="stylesheet" />
</head>
<body>
    <div class="dashboard-wrapper">
<<<<<<< HEAD:Pages/Officer/OfficerEventCalendar.cshtml
        <!-- Sidebar -->
=======
>>>>>>> 2deb19a124fee2ad6301d74e504ee438882919de:Pages/Officer/EventCalendar.cshtml
        <aside class="sidebar">
            <div class="logo">
                <img src="~/Images/logo 1.png" alt="Vista Logo">
                <span>vista.</span>
            </div>

            <nav class="nav-menu">
                <ul>
                    <li>
<<<<<<< HEAD:Pages/Officer/OfficerEventCalendar.cshtml
                        <a href="/Officer/Officerdashboard">
=======
                        <a href="/Officer/dashboard">
>>>>>>> 2deb19a124fee2ad6301d74e504ee438882919de:Pages/Officer/EventCalendar.cshtml
                            <i class="fas fa-th-large"></i>
                            <span>Dashboard</span>
                        </a>
                    </li>
                    <li>
<<<<<<< HEAD:Pages/Officer/OfficerEventCalendar.cshtml
                        <a href="/Officer/OfficerAnnouncements">
=======
                        <a href="/Officer/Announcements">
>>>>>>> 2deb19a124fee2ad6301d74e504ee438882919de:Pages/Officer/EventCalendar.cshtml
                            <i class="fas fa-bullhorn"></i>
                            <span>Announcements</span>
                        </a>
                    </li>
                    <li>
<<<<<<< HEAD:Pages/Officer/OfficerEventCalendar.cshtml
                        <a href="/Officer/OfficerBillingPayments">
=======
                        <a href="/Officer/BillingPayments">
>>>>>>> 2deb19a124fee2ad6301d74e504ee438882919de:Pages/Officer/EventCalendar.cshtml
                            <i class="fas fa-file-invoice-dollar"></i>
                            <span>Billing & Payments</span>
                        </a>
                    </li>
                    <li>
<<<<<<< HEAD:Pages/Officer/OfficerEventCalendar.cshtml
                        <a href="~/Officer/OfficerFacilityReservation">
=======
                        <a href="/Officer/FacilityReservation">
>>>>>>> 2deb19a124fee2ad6301d74e504ee438882919de:Pages/Officer/EventCalendar.cshtml
                            <i class="fas fa-calendar-check"></i>
                            <span>Facility Reservation</span>
                        </a>
                    </li>
<<<<<<< HEAD:Pages/Officer/OfficerEventCalendar.cshtml
                    <li class="active">
                        <a href="/Officer/OfficerServiceRequest">
=======
                    <li>
                        <a href="/Officer/ServiceRequest">
>>>>>>> 2deb19a124fee2ad6301d74e504ee438882919de:Pages/Officer/EventCalendar.cshtml
                            <i class="fas fa-hands-helping"></i>
                            <span>Service Request</span>
                        </a>
                    </li>
                    <li>
<<<<<<< HEAD:Pages/Officer/OfficerEventCalendar.cshtml
                        <a href="/Officer/OfficerDocuments">
=======
                        <a href="/Officer/Documents">
>>>>>>> 2deb19a124fee2ad6301d74e504ee438882919de:Pages/Officer/EventCalendar.cshtml
                            <i class="fas fa-file-alt"></i>
                            <span>Documents</span>
                        </a>
                    </li>
<<<<<<< HEAD:Pages/Officer/OfficerEventCalendar.cshtml
                    <li>
                        <a href="/Officer/OfficerEventsScheduled">
=======
                    <li class="active">
                        <a href="/Officer/EventCalendar">
>>>>>>> 2deb19a124fee2ad6301d74e504ee438882919de:Pages/Officer/EventCalendar.cshtml
                            <i class="fas fa-calendar-alt"></i>
                            <span>Events Calendar</span>
                        </a>
                    </li>
                    <li>
<<<<<<< HEAD:Pages/Officer/OfficerEventCalendar.cshtml
                        <a href="/Officer/OfficerEditProfile">
=======
                        <a href="/Officer/EditProfile">
>>>>>>> 2deb19a124fee2ad6301d74e504ee438882919de:Pages/Officer/EventCalendar.cshtml
                            <i class="fas fa-user-circle"></i>
                            <span>Edit Profile</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </aside>
        <!-- Main Content -->
        <main class="main-content">
            <!-- Top Header -->
            <div class="top-header">
                <div class="calendar-title">
                    <h2>Event Calendar</h2>
                </div>
                <div class="user-header">
                    <div class="notification-settings">
                        <button class="icon-btn"><i class="fas fa-bell"></i></button>
                        <button class="icon-btn"><i class="fas fa-cog"></i></button>
                    </div>
                    <div class="user-info">
                        <div class="user-text">
                            <span class="user-name">Du Bois H.</span>
                            <span class="user-role">Homeowner</span>
                        </div>
                        <img src="/api/placeholder/40/40" alt="User Avatar" class="user-avatar">
                    </div>
                </div>
            </div>
            <div class="month-navigation">
                <button id="prev-month" class="month-nav-btn"><i class="fas fa-chevron-left"></i></button>
                <h3 id="current-month">Current Month</h3>
                <button id="next-month" class="month-nav-btn"><i class="fas fa-chevron-right"></i></button>
            </div>
            <!-- Calendar Container -->
            <div class="content-container">
                <!-- Main Calendar Section -->
                <div class="calendar-section">
                    <div class="calendar-grid-container">
                        <table class="calendar-table">
                            <thead>
                                <tr>
                                    <th>Sun</th>
                                    <th>Mon</th>
                                    <th>Tue</th>
                                    <th>Wed</th>
                                    <th>Thu</th>
                                    <th>Fri</th>
                                    <th>Sat</th>
                                </tr>
                            </thead>
                            <tbody id="calendar-body">
                            </tbody>
                        </table>
                    </div>

                    <div class="upcoming-events-section">
                        <div class="upcoming-header">
                            <h3>Upcoming Events</h3>
                            <div class="event-filter">
                                <select id="event-filter">
                                    <option value="all-events">All events</option>
                                    <option value="community">Community</option>
                                    <option value="meetings">Meetings</option>
                                    <option value="maintenance">Maintenance</option>
                                </select>
                            </div>
                        </div>

                        <div id="upcoming-events-list" class="upcoming-events-list">
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>
    <!-- Event Modal -->
    <div id="event-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal">&times;</span>
            <h3 id="modal-title">Create Event</h3>

            <!-- Event Creation Form -->
            <form id="new-event-form">
                <div class="form-group">
                    <label for="event-title">Event Title*</label>
                    <input type="text" id="event-title" name="event-title" required>
                </div>

                <div class="form-group">
                    <label for="event-date">Date*</label>
                    <input type="date" id="event-date" name="event-date" required>
                </div>

                <div class="form-group">
                    <label for="event-time">Time*</label>
                    <input type="text" id="event-time" name="event-time" placeholder="e.g. 2:00 - 4:00 PM" required>
                </div>

                <div class="form-group">
                    <label for="event-type">Event Type*</label>
                    <select id="event-type" name="event-type" required>
                        <option value="">Select type</option>
                        <option value="meeting">Board Meeting</option>
                        <option value="pool">Pool</option>
                        <option value="maintenance">Maintenance</option>
                        <option value="yard">Yard Sale</option>
                        <option value="community">Community</option>
                        <option value="general">General</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="event-description">Description</label>
                    <textarea id="event-description" name="event-description" rows="4"></textarea>
                </div>

                <div class="form-actions">
                    <button type="button" id="cancel-event">Cancel</button>
                    <button type="submit" id="save-event">Save Event</button>
                </div>
            </form>

            <!-- This section will show existing events for the day -->
            <div id="existing-events" style="margin-top: 2rem; display: none;">
                <h3>Existing Events on This Date</h3>
                <div id="events-list"></div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Calendar data (existing events)
            //{ id: 1, date: '2025-03-03', title: 'Board Meeting', time: '2:00 - 4:00 PM', type: 'meeting', description: 'Monthly board meeting to discuss community issues and plans.' },
            //{ id: 2, date: '2025-03-12', title: 'Pool Inspection', time: '9:00 AM', type: 'pool', description: 'Regular inspection of the community pool facilities.' },
            //{ id: 3, date: '2025-03-14', title: 'Maintenance', time: '7:00 - 11:00 AM', type: 'maintenance', description: 'Scheduled maintenance of common areas.' },
            //{ id: 4, date: '2025-03-21', title: 'Yard Sale', time: '8:00 AM', type: 'yard', description: 'Community yard sale. Sign up to participate.' },
            //{ id: 5, date: '2025-03-09', title: 'Landscape Maintenance', time: '7:00 - 11:00 AM', type: 'maintenance', description: 'Scheduled landscape maintenance.' },
            //{ id: 6, date: '2025-03-09', title: 'Community Yard Sale', time: '8:00 AM', type: 'yard', description: 'Community yard sale. Sign up to participate.' }
            let events = [];

            async function fetchEventsFromDatabase() {
                try {
                    fetch('/Officer/EventCalendar?handler=GetEvents')
                        .then(response => response.json())
                        .then(eventsIn => {
                            console.log('Events fetched:', eventsIn);

                            events = [];

                            eventsIn.forEach(event => {
                                // You can format the event if necessary before pushing it into the array
                                const formattedEvent = {
                                    id: event.eventID,
                                    date: event.eventDate,   // Ensure this is in a format like 'YYYY-MM-DD'
                                    title: event.title,
                                    time: event.eventTime,   // Ensure this is in a consistent time format
                                    type: event.eventType.trim(),
                                    description: event.description
                                };
                                events.push(formattedEvent);
                            });

                            renderCalendar();
                            renderUpcomingEvents();
                        })
                        .catch(error => {
                            console.error('Error fetching events:', error);
                        });
                } catch (error) {
                    console.error('Error fetching events:', error);
                }
            }

            // Initialize calendar
            const today = new Date();
            let currentMonth = today.getMonth(); // Get current month (0-indexed)
            let currentYear = today.getFullYear(); // Get current year

            // DOM Elements
            const prevMonthBtn = document.getElementById('prev-month');
            const nextMonthBtn = document.getElementById('next-month');
            const currentMonthEl = document.getElementById('current-month');
            const calendarBody = document.getElementById('calendar-body');
            const upcomingEventsList = document.getElementById('upcoming-events-list');
            const eventModal = document.getElementById('event-modal');
            const modalTitle = document.getElementById('modal-title');
            const newEventForm = document.getElementById('new-event-form');
            const closeModal = document.querySelector('.close-modal');
            const cancelEventBtn = document.getElementById('cancel-event');
            const eventDateInput = document.getElementById('event-date');
            const existingEvents = document.getElementById('existing-events');
            const eventsList = document.getElementById('events-list');

            // Event listeners
            prevMonthBtn.addEventListener('click', showPreviousMonth);
            nextMonthBtn.addEventListener('click', showNextMonth);
            closeModal.addEventListener('click', closeEventModal);
            cancelEventBtn.addEventListener('click', closeEventModal);
            newEventForm.addEventListener('submit', saveNewEvent);

            // Initial render
            fetchEventsFromDatabase();
            renderCalendar();
            renderUpcomingEvents();

            // Calendar functions
            function renderCalendar() {
                calendarBody.innerHTML = '';

                // Update month display
                const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                currentMonthEl.textContent = `${months[currentMonth]} ${currentYear}`;

                // Get first day of the month
                const firstDay = new Date(currentYear, currentMonth, 1);
                const startingDay = firstDay.getDay(); // 0 = Sunday

                // Get number of days in month
                const lastDay = new Date(currentYear, currentMonth + 1, 0);
                const daysInMonth = lastDay.getDate();

                // Get last day of previous month
                const prevMonthLastDay = new Date(currentYear, currentMonth, 0).getDate();

                // Build calendar
                let date = 1;
                let nextMonthDate = 1;

                // Create rows
                for (let i = 0; i < 6; i++) {
                    // Break if we've gone beyond the days in the month
                    if (date > daysInMonth) break;

                    const row = document.createElement('tr');

                    // Create cells
                    for (let j = 0; j < 7; j++) {
                        const cell = document.createElement('td');
                        const cellDay = document.createElement('span');
                        cellDay.className = 'calendar-day';

                        // Previous month days
                        if (i === 0 && j < startingDay) {
                            const prevMonthDay = prevMonthLastDay - (startingDay - j - 1);
                            cellDay.textContent = prevMonthDay;
                            cell.className = 'other-month';
                            cell.dataset.date = `${currentYear}-${String(currentMonth).padStart(2, '0')}-${String(prevMonthDay).padStart(2, '0')}`;
                        }
                        // Current month days
                        else if (date <= daysInMonth) {
                            cellDay.textContent = date;
                            cell.dataset.date = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(date).padStart(2, '0')}`;

                            // Check if it's today
                            if (date === today.getDate() && currentMonth === today.getMonth() && currentYear === today.getFullYear()) {
                                cell.className = 'today';
                            }

                            // Add events for this date
                            const dateEvents = events.filter(event => {
                                const eventDate = new Date(event.date);
                                return eventDate.getDate() === date &&
                                       eventDate.getMonth() === currentMonth &&
                                       eventDate.getFullYear() === currentYear;
                            });

                            dateEvents.forEach(event => {
                                const eventIndicator = document.createElement('span');
                                eventIndicator.className = `event-indicator event-${event.type}`;
                                eventIndicator.textContent = event.title;
                                eventIndicator.dataset.eventId = event.id;
                                cell.appendChild(eventIndicator);
                            });

                            date++;
                        }
                        // Next month days
                        else {
                            cellDay.textContent = nextMonthDate;
                            cell.className = 'other-month';
                            cell.dataset.date = `${currentYear}-${String(currentMonth + 2).padStart(2, '0')}-${String(nextMonthDate).padStart(2, '0')}`;
                            nextMonthDate++;
                        }

                        cell.appendChild(cellDay);
                        cell.addEventListener('click', () => showEventCreationForm(cell.dataset.date));
                        row.appendChild(cell);
                    }

                    calendarBody.appendChild(row);
                }
            }

            function showEventCreationForm(dateString) {
                const selectedDate = new Date(dateString);
                // Format date for display
                const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
                const formattedDate = selectedDate.toLocaleDateString('en-US', options);

                // Set modal title
                modalTitle.textContent = `Create Event for ${formattedDate}`;

                // Reset the form
                newEventForm.reset();
                newEventForm.removeAttribute('data-event-id');
                document.getElementById('save-event').textContent = 'Save Event';

                // Set the date in the form
                eventDateInput.value = formatDateForInput(selectedDate);

                // Check if there are existing events for this date
                const dateEvents = events.filter(event => {
                    const eventDate = new Date(event.date);
                    return eventDate.getDate() === selectedDate.getDate() &&
                           eventDate.getMonth() === selectedDate.getMonth() &&
                           eventDate.getFullYear() === selectedDate.getFullYear();
                });

                // Show or hide existing events section
                if (dateEvents.length > 0) {
                    existingEvents.style.display = 'block';
                    eventsList.innerHTML = '';

                    dateEvents.forEach(event => {
                        const eventItem = document.createElement('div');
                        eventItem.className = 'event-list-item';
                        eventItem.innerHTML = `
                            <div class="event-list-details">
                                <div class="event-list-title">${event.title}</div>
                                <div class="event-list-time">${event.time}</div>
                            </div>
                            <div class="event-list-actions">
                                <button class="edit-btn" data-event-id="${event.id}"><i class="fas fa-edit"></i></button>
                                <button class="delete-btn" data-event-id="${event.id}"><i class="fas fa-trash"></i></button>
                            </div>
                        `;

                        // Add event listeners for edit and delete buttons
                        const editBtn = eventItem.querySelector('.edit-btn');
                        const deleteBtn = eventItem.querySelector('.delete-btn');

                        editBtn.addEventListener('click', function(e) {
                            e.stopPropagation();
                            editEvent(event.id);
                        });

                        deleteBtn.addEventListener('click', function(e) {
                            e.stopPropagation();
                            deleteEvent(event.id);
                        });

                        eventsList.appendChild(eventItem);
                    });
                } else {
                    existingEvents.style.display = 'none';
                }

                // Show modal
                eventModal.classList.add('show');
            }

            async function saveNewEvent(e) {
                e.preventDefault();

                const eventId = newEventForm.dataset.eventId;
                const title = document.getElementById('event-title').value;
                const date = document.getElementById('event-date').value;
                const time = document.getElementById('event-time').value;
                const type = document.getElementById('event-type').value;
                const description = document.getElementById('event-description').value;

                const today = new Date();
                today.setHours(0, 0, 0, 0);

                const selectedDate = new Date(date);

                if (selectedDate < today) {
                    alert('You cannot create or update an event for a past date.');
                    return;
                }

                if (eventId) {
                    try {
                        const result = await Swal.fire({
                            title: 'Event confirmation',
                            text: 'Are you sure you want to update this event?',
                            icon: 'question',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, update it!',
                            customClass: {
                                popup: "custom-swal-popup",
                                title: "custom-swal-title",
                                htmlContainer: "custom-swal-text"
                            }
                        });
                        console.log("Sending updated event:", {
                            EventID: parseInt(eventId),
                            EventDate: date,
                            Title: title,
                            EventTime: time,
                            EventType: type,
                            Description: description
                        });
                        if (result.isConfirmed) {
                            const response = await fetch('/Officer/EventCalendar?handler=UpdateEvent', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    EventID: parseInt(eventId),
                                    EventDate: date,
                                    Title: title,
                                    EventTime: time,
                                    EventType: type,
                                    Description: description
                                })
                            });
                            if (response.ok) {
                                await Swal.fire({
                                    title: 'Event updated!',
                                    text: 'Your event has been updated.',
                                    icon: 'success',
                                    timerProgressBar: true,
                                    timer: 2000,
                                    showConfirmButton: false,
                                    customClass: {
                                        popup: "custom-swal-popup",
                                        title: "custom-swal-title",
                                        htmlContainer: "custom-swal-text"
                                    }
                                });
                                location.reload();
                            } else {
                                const errorText = await response.text();
                                console.error('Failed to update event: ' + errorText);
                            }
                        } else {
                            throw new Error('Event update cancelled.');
                        }

                    } catch (error) {
                        console.error('Error updating event:', error);
                        alert('An error occurred while updating event.');
                    }
                } else {
                    const newEvent = {
                        EventID: eventId,
                        EventDate: date,
                        Title: title,
                        EventTime: time,
                        EventType: type,
                        Description: description
                    };

                    try {
                        const result = await Swal.fire({
                            title: 'Event confirmation',
                            text: 'Are you sure to add this event?',
                            icon: 'question',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, add it!',
                            customClass: {
                                popup: "custom-swal-popup",
                                title: "custom-swal-title",
                                htmlContainer: "custom-swal-text"
                            }
                        });

                        if (result.isConfirmed) {
                            const response = await fetch('/Officer/EventCalendar?handler=AddEvent', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(newEvent)
                            });

                            if (response.ok) {
                                await Swal.fire({
                                    title: 'Event added!',
                                    text: 'Your event has been added.',
                                    icon: 'success',
                                    timerProgressBar: true,
                                    timer: 2000,
                                    showConfirmButton: false,
                                    customClass: {
                                        popup: "custom-swal-popup",
                                        title: "custom-swal-title",
                                        htmlContainer: "custom-swal-text"
                                    }
                                });
                                location.reload();
                            } else {
                                const errorText = await response.text();
                                console.log('Failed to create event: ' + errorText);
                            }
                        } else {
                            throw new Error('Event creation cancelled.');
                        }

                    } catch (error) {
                        console.error('Error:', error);
                        alert('An error occurred while creating event.');
                    }
                }

                renderCalendar();
                renderUpcomingEvents();
                closeEventModal();
            }

            function editEvent(eventId) {
                const event = events.find(e => e.id === parseInt(eventId));

                if (!event) return;

                // Set modal title
                modalTitle.textContent = 'Edit Event';

                // Fill the form with event data
                document.getElementById('event-title').value = event.title;
                document.getElementById('event-date').value = formatDateForInput(new Date(event.date));
                document.getElementById('event-time').value = event.time;
                document.getElementById('event-type').value = event.type;
                document.getElementById('event-description').value = event.description;

                // Store the event ID for updating
                newEventForm.dataset.eventId = event.id;

                // Change save button text
                document.getElementById('save-event').textContent = 'Update Event';

                document.getElementById('save-event').addEventListener('click', function (e) {
                    saveNewEvent(e); // Trigger saveNewEvent when save is clicked
                });
            }

            function deleteEvent(eventId) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!',
                    customClass: {
                        popup: "custom-swal-popup",
                        title: "custom-swal-title",
                        htmlContainer: "custom-swal-text"
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        fetch('/Officer/EventCalendar?handler=DeleteEvent', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ EventId: parseInt(eventId) }) // <-- this is important!
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Failed to delete event.');
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (data.success) {
                                    // Remove from array locally
                                    const eventIndex = events.findIndex(e => e.EventID === parseInt(eventId));
                                    if (eventIndex !== -1) {
                                        events.splice(eventIndex, 1);
                                        renderCalendar();
                                        renderUpcomingEvents();
                                    }
                                    fetchEventsFromDatabase();
                                    Swal.fire({
                                        title: 'Event removed!',
                                        text: 'You just deleted the event.',
                                        icon: 'success',
                                        timerProgressBar: true,
                                        timer: 2000,
                                        showConfirmButton: false,
                                        customClass: {
                                            popup: "custom-swal-popup",
                                            title: "custom-swal-title",
                                            htmlContainer: "custom-swal-text"
                                        }
                                    });
                                } else {
                                    Swal.fire('Error!', 'Failed to delete event.', 'error');
                                }
                            })
                            .catch(error => {
                                console.error('Error:', error);
                                Swal.fire('Error!', error.message, 'error');
                            });
                    }
                });
            }

            function renderUpcomingEvents() {
                upcomingEventsList.innerHTML = '';

                // Filter events by date (upcoming)
                const upcomingEvents = events.filter(event => {
                    const eventDate = new Date(event.date);
                    return eventDate >= today;
                }).sort((a, b) => new Date(a.date) - new Date(b.date));

                // Limit to 5 events
                const limitedEvents = upcomingEvents.slice(0, 5);

                // Display events
                if (limitedEvents.length === 0) {
                    const noEvents = document.createElement('p');
                    noEvents.textContent = 'No upcoming events.';
                    upcomingEventsList.appendChild(noEvents);
                    return;
                }

                limitedEvents.forEach(event => {
                    const eventDate = new Date(event.date);
                    const day = eventDate.getDate();

                    const eventItem = document.createElement('div');
                    eventItem.className = 'event-item';
                    eventItem.innerHTML = `
                        <div class="event-date">${day}</div>
                        <div class="event-details">
                            <h4>${event.title}</h4>
                            <p class="event-time">${event.time}</p>
                            <div class="event-actions">
                                <button class="btn ${event.type}">${capitalizeFirstLetter(event.type)}</button>
                                <button class="btn details" data-event-id="${event.id}">Details</button>
                            </div>
                        </div>
                    `;

                    // Add event listener to details button
                    eventItem.querySelector('.btn.details').addEventListener('click', () => {
                        const eventDate = new Date(event.date);
                        showEventCreationForm(formatDateForInput(eventDate));
                    });

                    upcomingEventsList.appendChild(eventItem);
                });
            }

            function showPreviousMonth() {
                currentMonth--;
                if (currentMonth < 0) {
                    currentMonth = 11;
                    currentYear--;
                }
                renderCalendar();
            }

            function showNextMonth() {
                currentMonth++;
                if (currentMonth > 11) {
                    currentMonth = 0;
                    currentYear++;
                }
                renderCalendar();
            }

            function closeEventModal() {
                eventModal.classList.remove('show');
            }

            // Helper function to format date for input field
            function formatDateForInput(date) {
                const d = new Date(date);
                const year = d.getFullYear();
                const month = String(d.getMonth() + 1).padStart(2, '0');
                const day = String(d.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
            }

            // Helper function
            function capitalizeFirstLetter(string) {
                return string.charAt(0).toUpperCase() + string.slice(1);
            }

            // Close modal when clicking outside
            window.addEventListener('click', (event) => {
                if (event.target === eventModal) {
                    closeEventModal();
                }
            });

            // Handle escape key press
            document.addEventListener('keydown', (event) => {
                if (event.key === 'Escape' && eventModal.classList.contains('show')) {
                    closeEventModal();
                }
            });
        });
    </script>
</body>
</html>