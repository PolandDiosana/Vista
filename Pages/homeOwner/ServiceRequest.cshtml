@page
@model Vista_Subdivision.Pages.homeOwner.ServiceRequestModel
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Submit Service Request - Vista</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/homeownerServiceRequest.css">
    <link rel="stylesheet" href="~/css/sidebar.css">
</head>
<body>
    <div class="dashboard-wrapper">
        <!-- Sidebar -->
        <aside class="sidebar">
            <div class="logo">
                <img src="~/Images/logo 1.png" alt="Vista Logo">
                <span>vista.</span>
            </div>
            <nav class="nav-menu">
                <ul>
                    <li>
                        <a href="/homeOwner/dashboard">
                            <i class="fas fa-th-large"></i>
                            <span>Dashboard</span>
                        </a>
                    </li>
                    <li>
                        <a href="/homeOwner/Announcements">
                            <i class="fas fa-bullhorn"></i>
                            <span>Announcements</span>
                        </a>
                    </li>
                    <li>
                        <a href="/homeOwner/BillingPayments">
                            <i class="fas fa-file-invoice-dollar"></i>
                            <span>Billing & Payments</span>
                        </a>
                    </li>
                    <li>
                        <a href="/homeOwner/FacilityReservation">
                            <i class="fas fa-calendar-check"></i>
                            <span>Facility Reservation</span>
                        </a>
                    </li>
                    <li class="active">
                        <a href="/homeOwner/ServiceRequest">
                            <i class="fas fa-hands-helping"></i>
                            <span>Service Request</span>
                        </a>
                    </li>
                    <li>
                        <a href="/homeOwner/Documents">
                            <i class="fas fa-file-alt"></i>
                            <span>Documents</span>
                        </a>
                    </li>
                    <li>
                        <a href="/homeOwner/EventsScheduled">
                            <i class="fas fa-calendar-alt"></i>
                            <span>Events Scheduled</span>
                        </a>
                    </li>
                    <li>
                        <a href="/homeOwner/EditProfile">
                            <i class="fas fa-user-circle"></i>
                            <span>Edit Profile</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </aside>

        <!-- Main Content -->
        <main class="main-content">
            <div class="content">
                <h2>Submit Service Request</h2>

                <!-- Success Message (Initially Hidden) -->
                <div class="submit-success" id="submitSuccess">
                    <i class="fas fa-check-circle"></i>
                    <h3>Service Request Submitted Successfully!</h3>
                    <p>Your request has been received. We will attend to it as soon as possible.</p>
                    <p>Request ID: <strong>REQ-<span id="requestId">2025001</span></strong></p>
                </div>

                <!-- Service Request Form -->
                <div class="service-request-form" id="requestForm">
                    <form id="serviceRequestForm" method="post">
                        @Html.AntiForgeryToken()
                        <div class="form-group">
                            <label for="requestTitle">Request Title</label>
                            <input type="text" id="requestTitle" class="form-control" placeholder="E.g., Street Light Outage on Elm Street" name="Request.ReqTitle" required>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label>Location</label>
                                <div class="location-selector">
                                    <select class="form-control" id="blockNumber" required>
                                        <option value="">Select Block</option>
                                        <option value="Block 4">Block 4</option>
                                        <option value="Block 5">Block 5</option>
                                        <option value="Block 6">Block 6</option>
                                        <option value="Block 7">Block 7</option>
                                    </select>
                                    <select class="form-control" id="lotNumber" required>
                                        <option value="">Select Lot</option>
                                        <option value="Lot 1">Lot 1</option>
                                        <option value="Lot 2">Lot 2</option>
                                        <option value="Lot 3">Lot 3</option>
                                        <option value="Lot 4">Lot 4</option>
                                        <option value="Lot 5">Lot 5</option>
                                        <option value="Lot 6">Lot 6</option>
                                        <option value="Lot 7">Lot 7</option>
                                    </select>
                                    <input type="hidden" id="location" name="Request.Location"/>
                                </div>
                                <input type="text" id="streetName" class="form-control" placeholder="Street Name (e.g., Elm Street)" name="Request.StreetName" required>
                            </div>

                            <div class="form-group">
                                <label>Priority Level</label>
                                <div class="priority-selector">
                                    <div class="priority-option">
                                        <input type="radio" id="lowPriority" name="Request.PriorityLevel" value="Low Priority">
                                        <label for="lowPriority" class="low">Low Priority</label>
                                    </div>
                                    <div class="priority-option">
                                        <input type="radio" id="mediumPriority" name="Request.PriorityLevel" value="Medium Priority" checked>
                                        <label for="mediumPriority" class="medium">Medium Priority</label>
                                    </div>
                                    <div class="priority-option">
                                        <input type="radio" id="highPriority" name="Request.PriorityLevel" value="High Priority">
                                        <label for="highPriority" class="high">High Priority</label>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="requestCategory">Request Category</label>
                            <select id="requestCategory" class="form-control" name="Request.Category" required>
                                <option value="">Select Category</option>
                                <option value="Electrical">Electrical</option>
                                <option value="Plumbing">Plumbing</option>
                                <option value="Structural">Structural</option>
                                <option value="Landscape">Landscape</option>
                                <option value="Security">Security</option>
                                <option value="Common Areas">Common Areas</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="requestDescription">Description</label>
                            <textarea id="requestDescription" class="form-control" placeholder="Please provide detailed information about the issue..." name="Request.Description" required></textarea>
                        </div>

                        <input type="hidden" id="status" name="Request.Status" value="Pending">
                        <input type="hidden" id="datesubmitted" name="Request.DateSubmitted" />

                        <div class="form-group">
                            <label>Attachments (optional)</label>
                            <div class="file-upload" id="fileUpload">
                                <i class="fas fa-cloud-upload-alt"></i>
                                <p>Drag and drop files here or click to browse</p>
                                <p><small>Max 5 files. Supported formats: JPG, PNG, PDF (Max 5MB each)</small></p>
                                <input type="file" id="fileInput" multiple accept=".jpg,.jpeg,.png,.pdf">
                            </div>
                            <div class="selected-files" id="selectedFiles">
                                <!-- Selected files will appear here -->
                            </div>
                        </div>

                        <div class="form-footer">
                            <button type="button" class="btn btn-cancel" id="cancelBtn">Cancel</button>
                            <button type="submit" class="btn btn-submit">Submit Request</button>
                        </div>
                    </form>
                </div>
            </div>
        </main>
    </div>
    <script>
        // Show selected files
        document.getElementById('fileInput').addEventListener('change', function (e) {
            const selectedFiles = document.getElementById('selectedFiles');
            const files = e.target.files;

            for (let i = 0; i < files.length; i++) {
                if (selectedFiles.children.length >= 5) {
                    alert('Maximum 5 files allowed.');
                    break;
                }

                const file = files[i];
                if (file.size > 5 * 1024 * 1024) {
                    alert(`File ${file.name} exceeds 5MB limit.`);
                    continue;
                }

                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';

                let iconClass = 'fa-file';
                if (file.type.includes('image')) {
                    iconClass = 'fa-file-image';
                } else if (file.type.includes('pdf')) {
                    iconClass = 'fa-file-pdf';
                }

                fileItem.innerHTML = `
                            <i class="fas ${iconClass}"></i>
                            <span>${file.name}</span>
                            <i class="fas fa-times remove"></i>
                        `;

                fileItem.querySelector('.remove').addEventListener('click', function () {
                    fileItem.remove();
                });

                selectedFiles.appendChild(fileItem);
            }
        });

        // Click to browse files
        document.getElementById('fileUpload').addEventListener('click', function () {
            document.getElementById('fileInput').click();
        });

        // Prevent default drag behaviors
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            document.getElementById('fileUpload').addEventListener(eventName, function (e) {
                e.preventDefault();
                e.stopPropagation();
            });
        });

        // Highlight drop area when dragging over it
        ['dragenter', 'dragover'].forEach(eventName => {
            document.getElementById('fileUpload').addEventListener(eventName, function () {
                this.style.borderColor = '#f8b84e';
                this.style.backgroundColor = 'rgba(248, 184, 78, 0.05)';
            });
        });

        ['dragleave', 'drop'].forEach(eventName => {
            document.getElementById('fileUpload').addEventListener(eventName, function () {
                this.style.borderColor = '#e0e0e0';
                this.style.backgroundColor = 'transparent';
            });
        });

        // Handle dropped files
        document.getElementById('fileUpload').addEventListener('drop', function (e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            document.getElementById('fileInput').files = files;

            // Trigger change event to show files
            const event = new Event('change');
            document.getElementById('fileInput').dispatchEvent(event);
        });

        // Form submission with debugging
        document.getElementById('serviceRequestForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            const blockSelect = document.getElementById('blockNumber');
            const lotSelect = document.getElementById('lotNumber');
            const locationInput = document.getElementById('location');

            function updateLocation() {
                const block = blockSelect.value;
                const lot = lotSelect.value;
                locationInput.value = `${block}, ${lot}`;
            }

            blockSelect.addEventListener('change', updateLocation);
            lotSelect.addEventListener('change', updateLocation);

            updateLocation();

            const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

            const dateNow = new Date();
            let month = months[dateNow.getMonth()];
            let day = dateNow.getDate();
            let year = dateNow.getFullYear();

            document.getElementById('datesubmitted').value = month + " " + day + ", " + year;

            // Validate required fields manually
            const requiredFields = [
                { id: 'requestTitle', name: 'Request Title' },
                { id: 'blockNumber', name: 'Block Number' },
                { id: 'lotNumber', name: 'Lot Number' },
                { id: 'location', name: 'Location'},
                { id: 'streetName', name: 'Street Name' },
                { id: 'requestCategory', name: 'Request Category' },
                { id: 'requestDescription', name: 'Description' },
                { id: 'status', name: 'Status'},
            ];

            let hasErrors = false;
            requiredFields.forEach(field => {
                const element = document.getElementById(field.id);
                if (!element.value.trim()) {
                    alert(`${field.name} is required.`);
                    hasErrors = true;
                }
            });

            // Check if priority is selected
            if (!document.querySelector('input[name="Request.PriorityLevel"]:checked')) {
                alert('Please select a Priority Level.');
                hasErrors = true;
            }

            if (hasErrors) return;

            // Create FormData object to properly submit the form
            const formData = new FormData(this);

            // Debug: Log all form data being sent
            console.log("Form data being submitted:");
            for (let pair of formData.entries()) {
                console.log(pair[0] + ': ' + pair[1]);
            }

            try {
                // Submit the form data using fetch
                const response = await fetch('/homeOwner/ServiceRequest', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                        // RequestVerificationToken is automatically included in FormData
                    }
                });

                console.log("Response status:", response.status);
                console.log("Response status text:", response.statusText);

                if (response.ok) {
                    // Get the response text for debugging
                    const responseText = await response.text();
                    console.log("Response body:", responseText);

                    document.getElementById('requestForm').style.display = 'none';
                    document.getElementById('submitSuccess').style.display = 'block';
                    document.getElementById('requestId')
                } else {
                    try {
                        const errorText = await response.text();
                        console.error('Error response:', errorText);
                        alert(`Submission error: ${response.status} ${response.statusText}\n\nDetails: ${errorText}`);
                    } catch (textError) {
                        alert(`Submission error: ${response.status} ${response.statusText}`);
                    }
                }
            } catch (error) {
                console.error('Form submission error:', error);
                alert(`There was an error submitting your request: ${error.message}`);
            }
        });

        // Cancel button
        document.getElementById('cancelBtn').addEventListener('click', function () {
            if (confirm('Are you sure you want to cancel this request? All entered information will be lost.')) {
                document.getElementById('serviceRequestForm').reset();
                document.getElementById('selectedFiles').innerHTML = '';
            }
        });
    </script>
</body>
</html>
